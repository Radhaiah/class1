HTTP/1.1: (1997)
1.It supports connection reuse i.e. for every TCP connection 
there could be multiple requests and responses, and pipelining 
where the client can request several resources from the server 
at once. However, pipelining was hard to implement due to 
issues such as head-of-line blocking and was not a feasible solution.

2.Introduces a warning header field to carry additional information 
about the status of a message. Can define 24 status codes, error 
reporting is quicker and more efficient.

3.It is relatively secure since it uses digest authentication, 
NTLM authentication.

4.Expands on the caching support by using additional headers like 
cache-control, conditional headers like If-Match and by using entity tags.

HTTP/2:
1.Uses multiplexing, where over a single TCP connection resources to be 
delivered are interleaved and arrive at the client almost at the same time. 
It is done using streams which can be prioritized, can have dependencies 
and individual flow control. It also provides a feature called server push 
that allows the server to send data that the client will need but has not 
yet requested.

2.Underlying semantics of HTTP such as headers, status codes remains the same.

3.Security concerns from previous versions will continue to be seen in HTTP/2. 
However, it is better equipped to deal with them due to new TLS features like 
connection error of type Inadequate_Security.

4.HTTP/2 does not change much in terms of caching. With the server push feature 
if the client finds the resources are already present in the cache, 
it can cancel the pushed stream

about objects and its internal representation in Javascript

Objects, in JavaScript, is it’s most important data-type 
and forms the building blocks for modern JavaScript. 
These objects are quite different from JavaScript’s 
primitive data-types(Number, String, Boolean, null, 
undefined and symbol) in the sense that while these 
primitive data-types all store a single value each (depending on their types).

Objects are more complex and each object may contain any combination of these
primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference 
value are given a reference or a pointer to that value. That reference or pointer 
points to the location in memory where the object is stored. The variables don’t 
actually store the value.
Loosely speaking, objects in JavaScript may be defined as an unordered collection 
of related data, of primitive or reference types, in the form of “key: value” pairs. 
These keys can be variables or functions and are called properties and methods, 
respectively, in the context of an object.
An object can be created with figure brackets {…} with an optional list of properties. 
A property is a “key: value” pair, where a key is a string (also called a “property name”), 
and value can be anything.